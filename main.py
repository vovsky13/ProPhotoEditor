def main():
import logging
import streamlit as st
from PIL import Image
from io import BytesIO
from utils import (
    validate_image,
    mm_to_pixels,
    format_size,
    create_grid,
    apply_color_filters,
    apply_color_calibration
)
from exceptions import InvalidImageError, ProcessingError
from config import Config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    filename=Config.LOG_FILE,
    level=logging.DEBUG if Config.DEBUG else logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s"
)

def main():
    st.set_page_config(page_title="Pro Photo Editor", layout="wide")
    st.title("üé® Pro Photo Editor")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–æ–Ω–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    if "image" not in st.session_state:
        st.session_state.image = None
    if "processed_image" not in st.session_state:
        st.session_state.processed_image = None

    # –°–∞–π–¥–±–∞—Ä –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –±–∞–∑–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
    with st.sidebar:
        st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", type=["jpg", "png", "jpeg"])
        
        if uploaded_file:
            try:
                image = Image.open(uploaded_file)
                validate_image(image)
                st.session_state.image = image
                st.success("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!")
            except InvalidImageError as e:
                st.error(str(e))
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}")
                st.error("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞")

        st.divider()
        dpi = st.slider("DPI –¥–ª—è –ø–µ—á–∞—Ç–∏", 72, 600, 300)
        show_grid = st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å —Å–µ—Ç–∫—É")
        grid_spacing = st.slider("–®–∞–≥ —Å–µ—Ç–∫–∏ (–º–º)", 1, 100, 10) if show_grid else 10

    # –û—Å–Ω–æ–≤–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏
    tab1, tab2, tab3 = st.tabs(["üì∑ –ö–æ—Ä—Ä–µ–∫—Ü–∏—è", "üéöÔ∏è –§–∏–ª—å—Ç—Ä—ã", "üíæ –≠–∫—Å–ø–æ—Ä—Ç"])

    with tab1:
        if st.session_state.image:
            col1, col2 = st.columns(2)
            with col1:
                st.subheader("–û—Ä–∏–≥–∏–Ω–∞–ª")
                st.image(st.session_state.image, use_column_width=True)

            with col2:
                st.subheader("–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ —Ü–≤–µ—Ç–∞")
                temperature = st.slider("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (K)", 1000, 40000, 6500)
                tint = st.slider("–û—Ç—Ç–µ–Ω–æ–∫", -100, 100, 0)
                
                if st.button("–ü—Ä–∏–º–µ–Ω–∏—Ç—å –∫–∞–ª–∏–±—Ä–æ–≤–∫—É"):
                    try:
                        processed = apply_color_calibration(
                            st.session_state.image,
                            temperature=temperature,
                            tint=tint
                        )
                        if show_grid:
                            processed = create_grid(processed, spacing=mm_to_pixels(grid_spacing, dpi))
                        st.session_state.processed_image = processed
                    except ProcessingError as e:
                        st.error(str(e))
                        logging.error(f"–û—à–∏–±–∫–∞ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏: {str(e)}")

                if st.session_state.processed_image:
                    st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç")
                    st.image(st.session_state.processed_image, use_column_width=True)

    with tab2:
        if st.session_state.image:
            brightness = st.slider("–Ø—Ä–∫–æ—Å—Ç—å", 0.0, 2.0, 1.0, 0.1)
            contrast = st.slider("–ö–æ–Ω—Ç—Ä–∞—Å—Ç", 0.0, 2.0, 1.0, 0.1)
            saturation = st.slider("–ù–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å", 0.0, 2.0, 1.0, 0.1)
            gamma = st.slider("–ì–∞–º–º–∞", 0.1, 3.0, 1.0, 0.1)

            if st.button("–ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã"):
                try:
                    processed = apply_color_filters(
                        st.session_state.image,
                        brightness=brightness,
                        contrast=contrast,
                        saturation=saturation,
                        gamma=gamma
                    )
                    if show_grid:
                        processed = create_grid(processed, spacing=mm_to_pixels(grid_spacing, dpi))
                    st.session_state.processed_image = processed
                except ProcessingError as e:
                    st.error(str(e))
                    logging.error(f"–û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤: {str(e)}")

    with tab3:
        if st.session_state.processed_image:
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–∑–º–µ—Ä–µ
            size_info = format_size(st.session_state.processed_image.size)
            st.metric("–†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", size_info)
            
            # –ü—Ä–µ—Å–µ—Ç—ã
            preset_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–∞")
            if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–µ—Å–µ—Ç"):
                save_preset(preset_name, {
                    'temperature': temperature,
                    'tint': tint,
                    'brightness': brightness,
                    'contrast': contrast
                })
                st.success("–ü—Ä–µ—Å–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")

            # –≠–∫—Å–ø–æ—Ä—Ç
            buf = BytesIO()
            st.session_state.processed_image.save(buf, format="PNG")
            byte_im = buf.getvalue()
            
            st.download_button(
                label="–°–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
                data=byte_im,
                file_name="processed_image.png",
                mime="image/png"
            )

if __name__ == "__main__":
    main()
 tab4, tab5 = st.tabs(["üåÄ –§–æ–Ω", "üé≠ –ü—Ä–µ—Å–µ—Ç-—Ñ–∏–ª—å—Ç—Ä—ã"])

    with tab4:
        if st.session_state.image:
            col1, col2, col3 = st.columns([1,1,1])
            
            with col1:
                st.subheader("–û—Ä–∏–≥–∏–Ω–∞–ª")
                st.image(st.session_state.image, use_column_width=True)
                
            with col2:
                if st.button("–£–¥–∞–ª–∏—Ç—å —Ñ–æ–Ω"):
                    try:
                        bg_removed = remove_background(st.session_state.image)
                        st.session_state.processed_image = bg_removed
                    except Exception as e:
                        st.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ–Ω–∞: {str(e)}")
                        
                new_bg = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –Ω–æ–≤—ã–π —Ñ–æ–Ω", type=["jpg", "png"])
                border_size = st.slider("–°–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –≥—Ä–∞–Ω–∏—Ü", 1, 20, 5)
                blend_level = st.slider("–°–º–µ—à–∏–≤–∞–Ω–∏–µ —Å —Ñ–æ–Ω–æ–º", 0.0, 1.0, 1.0)
                
            with col3:
                if st.session_state.processed_image and new_bg:
                    background_img = Image.open(new_bg)
                    replaced = replace_background(
                        st.session_state.processed_image,
                        background_img,
                        border_pixels=border_size,
                        blur_radius=int(blend_level*10)
                    st.image(replaced, use_column_width=True)

    with tab5:
        if st.session_state.image:
            preset = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä", 
                ['clarendon', 'gingham', 'moon', 'lark', 'juno'])
            intensity = st.slider("–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å", 0.0, 1.0, 0.8)
            
            preview = apply_advanced_filters(
                st.session_state.image, 
                filter_type=preset,
                intensity=intensity)
            
            col1, col2 = st.columns(2)
            with col1:
                st.image(st.session_state.image, caption="–û—Ä–∏–≥–∏–Ω–∞–ª")
            with col2:
                st.image(preview, caption=f"–§–∏–ª—å—Ç—Ä: {preset}")